"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-filepond";
exports.ids = ["vendor-chunks/react-filepond"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-filepond/dist/react-filepond.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-filepond/dist/react-filepond.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilePond: () => (/* binding */ FilePond),\n/* harmony export */   FileStatus: () => (/* reexport safe */ filepond__WEBPACK_IMPORTED_MODULE_1__.FileStatus),\n/* harmony export */   registerPlugin: () => (/* reexport safe */ filepond__WEBPACK_IMPORTED_MODULE_1__.registerPlugin)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var filepond__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! filepond */ \"(ssr)/./node_modules/filepond/dist/filepond.esm.js\");\n/*!\n * react-filepond v7.1.3\n * A handy FilePond adapter component for React\n * \n * Copyright (c) 2024 PQINA\n * https://pqina.nl/filepond\n * \n * Licensed under the MIT license.\n */\n\n\n\n// Import required methods and styles from the FilePond module, should not need anything else\n\n\n// We need to be able to call the registerPlugin method directly so we can add plugins\n\n\n// Do this once\nconst isSupported = (0,filepond__WEBPACK_IMPORTED_MODULE_1__.supported)();\n\n// filtered methods\nconst filteredMethods = [\n  \"setOptions\",\n  \"on\",\n  \"off\",\n  \"onOnce\",\n  \"appendTo\",\n  \"insertAfter\",\n  \"insertBefore\",\n  \"isAttachedTo\",\n  \"replaceElement\",\n  \"restoreElement\",\n  \"destroy\",\n];\n\n// The React <FilePond/> wrapper\nclass FilePond extends (react__WEBPACK_IMPORTED_MODULE_0___default().Component) {\n  constructor(props) {\n    super(props);\n    this.allowFilesSync = true;\n  }\n\n  // Will setup FilePond instance when mounted\n  componentDidMount() {\n    // clone the input so we can restore it in unmount\n    this._input = this._element.querySelector('input[type=\"file\"]');\n    this._inputClone = this._input.cloneNode();\n\n    // exit here if not supported\n    if (!isSupported) return;\n\n    const options = Object.assign({}, this.props);\n\n    // if onupdate files is defined, make sure setFiles does not cause race condition\n    if (options.onupdatefiles) {\n      const cb = options.onupdatefiles;\n      options.onupdatefiles = (items) => {\n        this.allowFilesSync = false;\n        cb(items);\n      };\n    }\n\n    // Create our pond\n    this._pond = (0,filepond__WEBPACK_IMPORTED_MODULE_1__.create)(this._input, options);\n\n    // Reference pond methods to FilePond component instance\n    Object.keys(this._pond)\n      .filter((key) => !filteredMethods.includes(key))\n      .forEach((key) => {\n        this[key] = this._pond[key];\n      });\n  }\n\n  // Will clean up FilePond instance when unmounted\n  componentWillUnmount() {\n    // exit when no pond defined\n    if (!this._pond) return;\n\n    // This fixed <Strict> errors\n\n    // FilePond destroy is async so we have to move FilePond to a bin element so it can no longer affect current element tree as React unmount / mount is sync\n    const bin = document.createElement(\"div\");\n    bin.append(this._pond.element);\n    bin.id = \"foo\";\n\n    // now we call destroy so FilePond can start it's destroy logic\n    this._pond.destroy();\n    this._pond = undefined;\n\n    // we re-add the original file input element so everything is as it was before\n    this._element.append(this._inputClone);\n  }\n\n  shouldComponentUpdate() {\n    if (!this.allowFilesSync) {\n      this.allowFilesSync = true;\n      return false;\n    }\n    return true;\n  }\n\n  // Something changed\n  componentDidUpdate() {\n    // exit when no pond defined\n    if (!this._pond) return;\n\n    const options = Object.assign({}, this.props);\n\n    // this is only set onces, on didmount\n    delete options.onupdatefiles;\n\n    // update pond options based on new props\n    this._pond.setOptions(options);\n  }\n\n  // Renders basic element hook for FilePond to attach to\n  render() {\n    const {\n      id,\n      name,\n      className,\n      allowMultiple,\n      required,\n      captureMethod,\n      acceptedFileTypes,\n    } = this.props;\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\n      \"div\",\n      {\n        className: \"filepond--wrapper\",\n        ref: (element) => (this._element = element),\n      },\n      (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"input\", {\n        type: \"file\",\n        name,\n        id,\n        accept: acceptedFileTypes,\n        multiple: allowMultiple,\n        required: required,\n        className: className,\n        capture: captureMethod,\n      })\n    );\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZmlsZXBvbmQvZGlzdC9yZWFjdC1maWxlcG9uZC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwRDs7QUFFMUQ7QUFDeUU7O0FBRXpFO0FBQ3NDOztBQUV0QztBQUNBLG9CQUFvQixtREFBUzs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNPLHVCQUF1Qix3REFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsb0NBQW9DOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLGdEQUFNOztBQUV2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0NBQW9DOztBQUVwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixXQUFXLG9EQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU0sb0RBQWE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm5yXFxEZXNrdG9wXFxTSElUMlxcaHV2ZS1lc3RhdGVcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxyZWFjdC1maWxlcG9uZFxcZGlzdFxccmVhY3QtZmlsZXBvbmQuZXNtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogcmVhY3QtZmlsZXBvbmQgdjcuMS4zXG4gKiBBIGhhbmR5IEZpbGVQb25kIGFkYXB0ZXIgY29tcG9uZW50IGZvciBSZWFjdFxuICogXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjQgUFFJTkFcbiAqIGh0dHBzOi8vcHFpbmEubmwvZmlsZXBvbmRcbiAqIFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG5cbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVFbGVtZW50LCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBJbXBvcnQgcmVxdWlyZWQgbWV0aG9kcyBhbmQgc3R5bGVzIGZyb20gdGhlIEZpbGVQb25kIG1vZHVsZSwgc2hvdWxkIG5vdCBuZWVkIGFueXRoaW5nIGVsc2VcbmltcG9ydCB7IGNyZWF0ZSwgc3VwcG9ydGVkLCByZWdpc3RlclBsdWdpbiwgRmlsZVN0YXR1cyB9IGZyb20gXCJmaWxlcG9uZFwiO1xuXG4vLyBXZSBuZWVkIHRvIGJlIGFibGUgdG8gY2FsbCB0aGUgcmVnaXN0ZXJQbHVnaW4gbWV0aG9kIGRpcmVjdGx5IHNvIHdlIGNhbiBhZGQgcGx1Z2luc1xuZXhwb3J0IHsgcmVnaXN0ZXJQbHVnaW4sIEZpbGVTdGF0dXMgfTtcblxuLy8gRG8gdGhpcyBvbmNlXG5jb25zdCBpc1N1cHBvcnRlZCA9IHN1cHBvcnRlZCgpO1xuXG4vLyBmaWx0ZXJlZCBtZXRob2RzXG5jb25zdCBmaWx0ZXJlZE1ldGhvZHMgPSBbXG4gIFwic2V0T3B0aW9uc1wiLFxuICBcIm9uXCIsXG4gIFwib2ZmXCIsXG4gIFwib25PbmNlXCIsXG4gIFwiYXBwZW5kVG9cIixcbiAgXCJpbnNlcnRBZnRlclwiLFxuICBcImluc2VydEJlZm9yZVwiLFxuICBcImlzQXR0YWNoZWRUb1wiLFxuICBcInJlcGxhY2VFbGVtZW50XCIsXG4gIFwicmVzdG9yZUVsZW1lbnRcIixcbiAgXCJkZXN0cm95XCIsXG5dO1xuXG4vLyBUaGUgUmVhY3QgPEZpbGVQb25kLz4gd3JhcHBlclxuZXhwb3J0IGNsYXNzIEZpbGVQb25kIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5hbGxvd0ZpbGVzU3luYyA9IHRydWU7XG4gIH1cblxuICAvLyBXaWxsIHNldHVwIEZpbGVQb25kIGluc3RhbmNlIHdoZW4gbW91bnRlZFxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBjbG9uZSB0aGUgaW5wdXQgc28gd2UgY2FuIHJlc3RvcmUgaXQgaW4gdW5tb3VudFxuICAgIHRoaXMuX2lucHV0ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiZmlsZVwiXScpO1xuICAgIHRoaXMuX2lucHV0Q2xvbmUgPSB0aGlzLl9pbnB1dC5jbG9uZU5vZGUoKTtcblxuICAgIC8vIGV4aXQgaGVyZSBpZiBub3Qgc3VwcG9ydGVkXG4gICAgaWYgKCFpc1N1cHBvcnRlZCkgcmV0dXJuO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuXG4gICAgLy8gaWYgb251cGRhdGUgZmlsZXMgaXMgZGVmaW5lZCwgbWFrZSBzdXJlIHNldEZpbGVzIGRvZXMgbm90IGNhdXNlIHJhY2UgY29uZGl0aW9uXG4gICAgaWYgKG9wdGlvbnMub251cGRhdGVmaWxlcykge1xuICAgICAgY29uc3QgY2IgPSBvcHRpb25zLm9udXBkYXRlZmlsZXM7XG4gICAgICBvcHRpb25zLm9udXBkYXRlZmlsZXMgPSAoaXRlbXMpID0+IHtcbiAgICAgICAgdGhpcy5hbGxvd0ZpbGVzU3luYyA9IGZhbHNlO1xuICAgICAgICBjYihpdGVtcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBvdXIgcG9uZFxuICAgIHRoaXMuX3BvbmQgPSBjcmVhdGUodGhpcy5faW5wdXQsIG9wdGlvbnMpO1xuXG4gICAgLy8gUmVmZXJlbmNlIHBvbmQgbWV0aG9kcyB0byBGaWxlUG9uZCBjb21wb25lbnQgaW5zdGFuY2VcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9wb25kKVxuICAgICAgLmZpbHRlcigoa2V5KSA9PiAhZmlsdGVyZWRNZXRob2RzLmluY2x1ZGVzKGtleSkpXG4gICAgICAuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIHRoaXNba2V5XSA9IHRoaXMuX3BvbmRba2V5XTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLy8gV2lsbCBjbGVhbiB1cCBGaWxlUG9uZCBpbnN0YW5jZSB3aGVuIHVubW91bnRlZFxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAvLyBleGl0IHdoZW4gbm8gcG9uZCBkZWZpbmVkXG4gICAgaWYgKCF0aGlzLl9wb25kKSByZXR1cm47XG5cbiAgICAvLyBUaGlzIGZpeGVkIDxTdHJpY3Q+IGVycm9yc1xuXG4gICAgLy8gRmlsZVBvbmQgZGVzdHJveSBpcyBhc3luYyBzbyB3ZSBoYXZlIHRvIG1vdmUgRmlsZVBvbmQgdG8gYSBiaW4gZWxlbWVudCBzbyBpdCBjYW4gbm8gbG9uZ2VyIGFmZmVjdCBjdXJyZW50IGVsZW1lbnQgdHJlZSBhcyBSZWFjdCB1bm1vdW50IC8gbW91bnQgaXMgc3luY1xuICAgIGNvbnN0IGJpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgYmluLmFwcGVuZCh0aGlzLl9wb25kLmVsZW1lbnQpO1xuICAgIGJpbi5pZCA9IFwiZm9vXCI7XG5cbiAgICAvLyBub3cgd2UgY2FsbCBkZXN0cm95IHNvIEZpbGVQb25kIGNhbiBzdGFydCBpdCdzIGRlc3Ryb3kgbG9naWNcbiAgICB0aGlzLl9wb25kLmRlc3Ryb3koKTtcbiAgICB0aGlzLl9wb25kID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gd2UgcmUtYWRkIHRoZSBvcmlnaW5hbCBmaWxlIGlucHV0IGVsZW1lbnQgc28gZXZlcnl0aGluZyBpcyBhcyBpdCB3YXMgYmVmb3JlXG4gICAgdGhpcy5fZWxlbWVudC5hcHBlbmQodGhpcy5faW5wdXRDbG9uZSk7XG4gIH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgaWYgKCF0aGlzLmFsbG93RmlsZXNTeW5jKSB7XG4gICAgICB0aGlzLmFsbG93RmlsZXNTeW5jID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBTb21ldGhpbmcgY2hhbmdlZFxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgLy8gZXhpdCB3aGVuIG5vIHBvbmQgZGVmaW5lZFxuICAgIGlmICghdGhpcy5fcG9uZCkgcmV0dXJuO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuXG4gICAgLy8gdGhpcyBpcyBvbmx5IHNldCBvbmNlcywgb24gZGlkbW91bnRcbiAgICBkZWxldGUgb3B0aW9ucy5vbnVwZGF0ZWZpbGVzO1xuXG4gICAgLy8gdXBkYXRlIHBvbmQgb3B0aW9ucyBiYXNlZCBvbiBuZXcgcHJvcHNcbiAgICB0aGlzLl9wb25kLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gIH1cblxuICAvLyBSZW5kZXJzIGJhc2ljIGVsZW1lbnQgaG9vayBmb3IgRmlsZVBvbmQgdG8gYXR0YWNoIHRvXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBpZCxcbiAgICAgIG5hbWUsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBhbGxvd011bHRpcGxlLFxuICAgICAgcmVxdWlyZWQsXG4gICAgICBjYXB0dXJlTWV0aG9kLFxuICAgICAgYWNjZXB0ZWRGaWxlVHlwZXMsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6IFwiZmlsZXBvbmQtLXdyYXBwZXJcIixcbiAgICAgICAgcmVmOiAoZWxlbWVudCkgPT4gKHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50KSxcbiAgICAgIH0sXG4gICAgICBjcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICB0eXBlOiBcImZpbGVcIixcbiAgICAgICAgbmFtZSxcbiAgICAgICAgaWQsXG4gICAgICAgIGFjY2VwdDogYWNjZXB0ZWRGaWxlVHlwZXMsXG4gICAgICAgIG11bHRpcGxlOiBhbGxvd011bHRpcGxlLFxuICAgICAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBjYXB0dXJlOiBjYXB0dXJlTWV0aG9kLFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-filepond/dist/react-filepond.esm.js\n");

/***/ })

};
;